{"version":3,"sources":["../src/plugins.js"],"names":["prompt","inquirer","createPromptModule","CLIPath","path","resolve","dirname","fs","realpathSync","__filename","PackageJSON","require","join","i18n","configure","locales","defaultLocale","directory","Plugins","plugins","pathName","forEach","pluginName","installPlugin","isInit","__this","Promise","reject","pluginPathResolve","process","cwd","statSync","isDirectory","mkdirSync","recursive","test","urlRepository","console","log","chalk","green","child","shell","env","on","err","exitCode","loadPackageDependencies","dependencies","childDependencies","stdio","stdin","stdout","stderr","pluginList","pInterval","setInterval","then","paths","length","clearInterval","dependenciesArr","pluginPackagePath","pluginPackageRequest","_","concat","Object","keys","setTimeout","type","name","default","__","message","validate","value","newPluginSettings","red","installPlugins","argv","h","Help"],"mappings":"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","file":"plugins.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport 'babel-polyfill';\nimport chalk from \"chalk\";\nimport globby from \"globby\";\nimport _ from \"lodash\";\nimport inquirer from \"inquirer\";\nimport i18n from \"i18n\";\nimport { spawn } from \"child_process\";\n\nlet prompt = inquirer.createPromptModule();\n\nconst CLIPath = path.resolve(path.dirname(fs.realpathSync(__filename)), \"../\");\nconst PackageJSON = require(path.join(CLIPath, \"package\"));\n\ni18n.configure({\n    locales: ['en'],\n    defaultLocale: 'en',\n    directory: path.join(CLIPath, \"locales\")\n});\n\nclass Plugins{\n    async installPlugins(plugins, pathName){\n        await plugins.forEach((pluginName) => {\n            this.installPlugin(pluginName, pathName, true);\n        });\n    }\n\n    async installPlugin(pluginName, pathName, isInit){\n        var __this = this;\n\n        return new Promise((resolve, reject) => {\n            if(pathName)\n                var pluginPathResolve = path.resolve(pathName);\n            else\n                var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n            (async () => {\n                try {\n                    if(!fs.statSync(pluginPathResolve).isDirectory())\n                        await fs.mkdirSync(pluginPathResolve, { recursive: true });\n                }\n                catch (err) {\n                    fs.mkdirSync(pluginPathResolve, { recursive: true });\n                }\n            })();\n\n            if(/(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\.git)(\\/?|\\#[-\\d\\w._]+?)$/.test(pluginName))\n                var urlRepository = pluginName;\n            else\n                var urlRepository = `git clone https://github.com/dekproject/${pluginName}`;\n\n            console.log(chalk.green(`[Installing] ${urlRepository}`));\n\n            var child = spawn(urlRepository, {\n                shell: true,\n                env: process.env,\n                cwd: pluginPathResolve\n            });\n\n            child.on('error', (err) => {\n                reject(`[${pluginName}] ${err}`);\n            });\n\n            child.on('exit', async (exitCode) => {\n                if(!isInit){\n                    var dependencies = await __this.loadPackageDependencies(pluginPathResolve);\n                    console.log(chalk.green(`[${pluginName}] Load dependencies...`));\n\n                    var childDependencies = spawn(`npm i ${dependencies}`, {\n                        shell: true,\n                        env: process.env,\n                        cwd: path.resolve(path.join(process.cwd())),\n                        stdio: [process.stdin, process.stdout, process.stderr]\n                    });\n\n                    childDependencies.on('error', (err) => {\n                        reject(`[${pluginName}] ${err}`);\n                    });\n\n                    childDependencies.on('exit', (exitCode) => {\n                        console.log(chalk.green(`[${pluginName}] Installation completed!`));\n                        resolve();\n                    });\n                }\n                else{\n                    resolve();\n                }\n            });\n        });\n    }\n\n    loadPackageDependencies(pathName, pluginList){\n        return new Promise((resolve, reject) => {\n            if(pathName)\n                var pluginPathResolve = path.resolve(pathName);\n            else\n                var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n            if(!pluginList)\n                pluginList = [];\n\n            var pInterval = setInterval(() => {\n                globby([`${pluginPathResolve}/*/package.json`]).then(async (paths) => {\n                    if(paths.length == pluginList.length || pluginList.length == 0){\n                        clearInterval(pInterval);\n                        var dependenciesArr = [];\n\n                        await paths.forEach(async (pluginPackagePath) => {\n                            let pluginPackageRequest = await require(pluginPackagePath);\n                            dependenciesArr = _.concat(dependenciesArr, Object.keys(pluginPackageRequest.dependencies));\n                        });\n\n                        setTimeout(() => {\n                            resolve(dependenciesArr.join(\" \"));\n                        }, 1000);\n                    }\n                });\n            }, 1000);\n        });\n    }\n\n    new(){\n        var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n        (async () => {\n            try {\n                if(!fs.statSync(pluginPathResolve).isDirectory())\n                    await fs.mkdirSync(pluginPathResolve, { recursive: true });\n            }\n            catch (err) {\n                fs.mkdirSync(pluginPathResolve, { recursive: true });\n            }\n        })();\n\n        prompt([{\n            type: \"input\",\n            name: \"name\",\n            default: i18n.__(\"myplugin\"),\n            message: i18n.__(\"What is the name of the plugin?\"),\n            validate: (value) => {\n                if (value.length)\n                    return true;\n                else\n                    return i18n.__(\"Please set a valid value\");\n            }\n        }]).then(async newPluginSettings => {\n            var child = spawn(`git clone https://github.com/dekproject/plugin-bootstrap ${newPluginSettings.name}`, {\n                shell: true,\n                cwd: pluginPathResolve\n            });\n\n            child.on('error', function (err) {\n                console.log(chalk.red(`[${newPluginSettings.name}] ${err}`));\n            });\n\n            child.on('exit', function (exitCode) {\n                console.log(chalk.green(`[${newPluginSettings.name}] creating successfully!`));\n            });\n        });\n    }\n}\n\nexport let plugins = new Plugins();\nexport let installPlugins = new Plugins().installPlugins;\nexport let installPlugin = new Plugins().installPlugin;\n\nexport default async (argv) => {\n    let plugins = new Plugins();\n\n    if(argv.h){\n        plugins.Help();\n    }\n};\n"]}