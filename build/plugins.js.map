{"version":3,"sources":["../src/plugins.js"],"names":["prompt","inquirer","createPromptModule","CLIPath","path","resolve","dirname","fs","realpathSync","__filename","PackageJSON","require","join","i18n","configure","locales","defaultLocale","directory","Plugins","plugins","pathName","forEach","pluginName","installPlugin","Promise","reject","pluginPathResolve","process","cwd","statSync","isDirectory","mkdirSync","recursive","console","log","chalk","green","child","shell","env","on","err","exitCode","pluginList","pInterval","setInterval","then","paths","length","clearInterval","dependenciesArr","pluginPackagePath","pluginPackageRequest","_","concat","Object","keys","dependencies","setTimeout","type","name","default","__","message","validate","value","newPluginSettings","red","installPlugins","argv","h","Help"],"mappings":"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","file":"plugins.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport 'babel-polyfill';\nimport chalk from \"chalk\";\nimport globby from \"globby\";\nimport _ from \"lodash\";\nimport inquirer from \"inquirer\";\nimport i18n from \"i18n\";\nimport { spawn } from \"child_process\";\n\nlet prompt = inquirer.createPromptModule();\n\nconst CLIPath = path.resolve(path.dirname(fs.realpathSync(__filename)), \"../\");\nconst PackageJSON = require(path.join(CLIPath, \"package\"));\n\ni18n.configure({\n    locales: ['en'],\n    defaultLocale: 'en',\n    directory: path.join(CLIPath, \"locales\")\n});\n\nclass Plugins{\n    async installPlugins(plugins, pathName){\n        await plugins.forEach((pluginName) => {\n            this.installPlugin(pluginName, pathName);\n        });\n    }\n\n    async installPlugin(pluginName, pathName){\n        return new Promise((resolve, reject) => {\n            if(pathName)\n                var pluginPathResolve = path.resolve(pathName);\n            else\n                var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n            (async () => {\n                try {\n                    if(!fs.statSync(pluginPathResolve).isDirectory())\n                        await fs.mkdirSync(pluginPathResolve, { recursive: true });\n                }\n                catch (err) {\n                    fs.mkdirSync(pluginPathResolve, { recursive: true });\n                }\n            })();\n\n            console.log(chalk.green(`[${pluginName}] Installing ...`));\n\n            var child = spawn(`git clone https://github.com/dekproject/${pluginName}`, {\n                shell: true,\n                env: process.env,\n                cwd: pluginPathResolve\n            });\n\n            child.on('error', function (err) {\n                reject(`[${pluginName}] ${err}`);\n            });\n\n            child.on('exit', function (exitCode) {\n                resolve();\n            });\n        });\n    }\n\n    loadPackageDependencies(pathName, pluginList){\n        return new Promise((resolve, reject) => {\n            if(pathName)\n                var pluginPathResolve = path.resolve(pathName);\n            else\n                var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n            var pInterval = setInterval(() => {\n                globby([`${pluginPathResolve}/*/package.json`]).then(async (paths) => {\n                    if(paths.length == pluginList.length){\n                        clearInterval(pInterval);\n                        var dependenciesArr = [];\n\n                        await paths.forEach(async (pluginPackagePath) => {\n                            let pluginPackageRequest = await require(pluginPackagePath);\n                            dependenciesArr = _.concat(dependenciesArr, Object.keys(pluginPackageRequest.dependencies));\n                        });\n\n                        setTimeout(() => {\n                            resolve(dependenciesArr.join(\" \"));\n                        }, 1000);\n                    }\n                });\n            }, 1000);\n        });\n    }\n\n    new(){\n        var pluginPathResolve = path.resolve(path.join(process.cwd(), \"src\", \"plugins\"));\n\n        (async () => {\n            try {\n                if(!fs.statSync(pluginPathResolve).isDirectory())\n                    await fs.mkdirSync(pluginPathResolve, { recursive: true });\n            }\n            catch (err) {\n                fs.mkdirSync(pluginPathResolve, { recursive: true });\n            }\n        })();\n\n        prompt([{\n            type: \"input\",\n            name: \"name\",\n            default: i18n.__(\"myplugin\"),\n            message: i18n.__(\"What is the name of the plugin?\"),\n            validate: (value) => {\n                if (value.length)\n                    return true;\n                else\n                    return i18n.__(\"Please set a valid value\");\n            }\n        }]).then(async newPluginSettings => {\n            var child = spawn(`git clone https://github.com/dekproject/plugin-bootstrap ${newPluginSettings.name}`, {\n                shell: true,\n                cwd: pluginPathResolve\n            });\n\n            child.on('error', function (err) {\n                console.log(chalk.red(`[${newPluginSettings.name}] ${err}`));\n            });\n\n            child.on('exit', function (exitCode) {\n                console.log(chalk.green(`[${newPluginSettings.name}] creating successfully!`));\n            });\n        });\n    }\n}\n\nexport let plugins = new Plugins();\nexport let installPlugins = new Plugins().installPlugins;\nexport let installPlugin = new Plugins().installPlugin;\n\nexport default async (argv) => {\n    let plugins = new Plugins();\n\n    if(argv.h){\n        plugins.Help();\n    }\n};\n"]}