{"version":3,"sources":["../src/init.js"],"names":["PackageJSON","require","path","join","process","cwd","prompt","inquirer","createPromptModule","registerPrompt","i18n","configure","locales","defaultLocale","directory","type","name","choices","message","validate","value","setLocale","default","__","length","then","itemType","rootPath","projectSettings","suggestOnly","Object","keys","dekPlugins","_","merge","projectSettings2"],"mappings":"uvBAOMA,aAAcC,QAAQC,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,CAAyB,SAAzB,CAAR,C,CAEhBC,OAASC,mBAASC,kBAAT,E,CACbD,mBAASE,cAAT,CAAwB,WAAxB,CAAqCR,QAAQ,qBAAR,CAArC,C,CAEAS,eAAKC,SAAL,CAAe,CACXC,QAAS,CAAC,IAAD,CAAO,MAAP,CADE,CAEXC,cAAe,IAFJ,CAGXC,UAAWZ,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,CAAyB,SAAzB,CAHA,CAAf,C,wEAMe,4FACXC,OAAO,CACH,CACIS,KAAM,MADV,CAEIC,KAAM,MAFV,CAGIC,QAAS,CAAC,IAAD,CAAO,MAAP,CAHb,CAIIC,QAAS,wBAJb,CAKIC,SAAU,WAACC,CAAD,CAAW,CACjBV,eAAKW,SAAL,CAAeD,CAAf,CADiB,GAGpB,CARL,CADG,CAWH,CACIL,KAAM,OADV,CAEIC,KAAM,MAFV,CAGIM,QAASZ,eAAKa,EAAL,CAAQ,WAAR,CAHb,CAIIL,QAASR,eAAKa,EAAL,CAAQ,kCAAR,CAJb,CAKIJ,SAAU,WAACC,CAAD,CAAW,SACbA,EAAMI,MADO,EAINd,eAAKa,EAAL,CAAQ,0BAAR,CACd,CAVL,CAXG,CAuBH,CACIR,KAAM,OADV,CAEIC,KAAM,SAFV,CAGIM,QAAS,OAHb,CAIIJ,QAASR,eAAKa,EAAL,CAAQ,qCAAR,CAJb,CAKIJ,SAAU,WAACC,CAAD,CAAW,SACbA,EAAMI,MADO,EAINd,eAAKa,EAAL,CAAQ,0BAAR,CACd,CAVL,CAvBG,CAAP,EAmCGE,IAnCH,CAmCQ,WAAmB,CACvBnB,OAAO,CAAC,CACJS,KAAM,OADF,CAEJC,KAAM,MAFF,CAGJU,SAAU,WAHN,CAIJC,SAAUvB,QAAQC,GAAR,EAJN,CAKJa,QAASR,eAAKa,EAAL,CAAQ,6BAAR,CALL,CAMJD,QAASlB,QAAQC,GAAR,GAAgB,GAAhB,CAAsBuB,EAAgBZ,IAN3C,CAOJa,cAPI,CAAD,CAQJ,CACCd,KAAM,OADP,CAECC,KAAM,YAFP,CAGCE,QAASR,eAAKa,EAAL,CAAQ,yCAAR,CAHV,CARI,CAYJ,CACCR,KAAM,UADP,CAECC,KAAM,SAFP,CAGCE,QAASR,eAAKa,EAAL,CAAQ,kCAAR,CAHV,CAICN,QAASa,OAAOC,IAAP,CAAY/B,YAAYgC,UAAxB,CAJV,CAZI,CAAP,EAiBIP,IAjBJ,CAiBS,WAAoB,CACzBG,EAAkBK,iBAAEC,KAAF,CAAQN,CAAR,CAAyBO,CAAzB,CASrB,CAPG;AACA;AACA;AACA;AACA;AACA;AACA;AA1BJ,CA4BH,CAhED,CADW,+C","file":"init.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport i18n from \"i18n\";\nimport inquirer from \"inquirer\";\nimport _ from \"lodash\";\n\nconst PackageJSON = require(path.join(process.cwd(), \"package\"));\n\nlet prompt = inquirer.createPromptModule();\ninquirer.registerPrompt('fuzzypath', require('inquirer-fuzzy-path'));\n\ni18n.configure({\n    locales: ['en', 'ptBR'],\n    defaultLocale: 'en',\n    directory: path.join(process.cwd(), \"locales\")\n});\n\nexport default async () => {\n    prompt([\n        {\n            type: \"list\",\n            name: \"lang\",\n            choices: [\"en\", \"ptBR\"],\n            message: \"What is your language?\",\n            validate: (value) => {\n                i18n.setLocale(value);\n                true;\n            }\n        },\n        {\n            type: \"input\",\n            name: \"name\",\n            default: i18n.__(\"myproject\"),\n            message: i18n.__(\"What is the name of the project?\"),\n            validate: (value) => {\n                if (value.length)\n                    return true;\n                else\n                    return i18n.__(\"Please set a valid value\");\n            }\n        },\n        {\n            type: \"input\",\n            name: \"version\",\n            default: \"1.0.0\",\n            message: i18n.__(\"What is the version of the project?\"),\n            validate: (value) => {\n                if (value.length)\n                    return true;\n                else\n                    return i18n.__(\"Please set a valid value\");\n            }\n        },\n    ]).then(projectSettings => {\n        prompt([{\n            type: 'input',\n            name: 'path',\n            itemType: 'directory',\n            rootPath: process.cwd(),\n            message: i18n.__(\"Directory for your project:\",),\n            default: process.cwd() + \"/\" + projectSettings.name,\n            suggestOnly: true\n        }, {\n            type: 'input',\n            name: 'repository',\n            message: i18n.__(\"What is the repository of this project?\"),\n        }, {\n            type: 'checkbox',\n            name: 'plugins',\n            message: i18n.__(\"Select plugins for your project:\"),\n            choices: Object.keys(PackageJSON.dekPlugins)\n        }]).then(projectSettings2 => {\n            projectSettings = _.merge(projectSettings, projectSettings2);\n\n            //Make dir\n            //Clone Skeleton\n            //Remove .git and package.json\n            //Git Init / Add remote\n            //Npm Init\n            //Download Plugins\n            //Install dependency\n        });;\n    });\n}\n"]}