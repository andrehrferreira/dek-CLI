{"version":3,"sources":["../src/init.js"],"names":["CLIPath","path","resolve","dirname","fs","realpathSync","__filename","PackageJSON","require","join","prompt","inquirer","createPromptModule","registerPrompt","i18n","configure","locales","defaultLocale","directory","Init","self","type","name","default","__","message","validate","value","length","then","frontendChoices","Object","keys","unshift","skeletonsChoices","itemType","rootPath","process","cwd","projectSettings","suggestOnly","test","choices","projectConfirms","skeleton","iValue","parseInt","e","settings","_","merge","projectSettingsPlugins","createProject","directoryExists","console","log","chalk","green","mkdir","recursive","err","reject","cloneSkeleton","red","repository","url","replace","child","shell","env","on","exitCode","unlinkGitAndPackage","createGitAndPackage","unlinkSync","dotEnvFile","port","writeFileSync","packageJSONTemplate","homepage","bugs","stdout","stderr","Install","bootstrap","filePath","statSync","isDirectory","yellow","argv","init","h","Help","Prompt"],"mappings":";;;;;;;;AAaA;;AAbA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAGA;;;;;;;;AAEA,IAAMA,UAAUC,eAAKC,OAAL,CAAaD,eAAKE,OAAL,CAAaC,aAAGC,YAAH,CAAgBC,UAAhB,CAAb,CAAb,EAAwD,KAAxD,CAAhB;AACA,IAAMC,cAAcC,QAAQP,eAAKQ,IAAL,CAAUT,OAAV,EAAmB,SAAnB,CAAR,CAApB;;AAEA,IAAIU,SAASC,mBAASC,kBAAT,EAAb;AACAD,mBAASE,cAAT,CAAwB,WAAxB,EAAqCL,QAAQ,qBAAR,CAArC;;AAEAM,eAAKC,SAAL,CAAe;AACXC,aAAS,CAAC,IAAD,CADE;AAEXC,mBAAe,IAFJ;AAGXC,eAAWjB,eAAKQ,IAAL,CAAUT,OAAV,EAAmB,SAAnB;AAHA,CAAf;;IAMamB,I,WAAAA,I;;;;;;;iCACD;AACJ,gBAAIC,OAAO,IAAX;;AAEAV,mBAAO;AACH;;;;;;;;;;AAUA;AACIW,sBAAM,OADV;AAEIC,sBAAM,MAFV;AAGIC,yBAAST,eAAKU,EAAL,CAAQ,WAAR,CAHb;AAIIC,yBAASX,eAAKU,EAAL,CAAQ,kCAAR,CAJb;AAKIE,0BAAU,kBAACC,KAAD,EAAW;AACjB,wBAAIA,MAAMC,MAAV,EACI,OAAO,IAAP,CADJ,KAGI,OAAOd,eAAKU,EAAL,CAAQ,0BAAR,CAAP;AACP;AAVL,aAXG,EAsBA;AACCH,sBAAM,OADP;AAECC,sBAAM,QAFP;AAGCG,yBAASX,eAAKU,EAAL,CAAQ,4BAAR;AAHV,aAtBA,EA0BA;AACCH,sBAAM,OADP;AAECC,sBAAM,aAFP;AAGCC,yBAAST,eAAKU,EAAL,CAAQ,qBAAR,CAHV;AAICC,yBAASX,eAAKU,EAAL,CAAQ,kCAAR;AAJV,aA1BA,EA+BA;AACCH,sBAAM,OADP;AAECC,sBAAM,SAFP;AAGCC,yBAAS,OAHV;AAICE,yBAASX,eAAKU,EAAL,CAAQ,qCAAR,CAJV;AAKCE,0BAAU,kBAACC,KAAD,EAAW;AACjB,wBAAIA,MAAMC,MAAV,EACI,OAAO,IAAP,CADJ,KAGI,OAAOd,eAAKU,EAAL,CAAQ,0BAAR,CAAP;AACP;AAVF,aA/BA,CAAP,EA2CGK,IA3CH,CA2CQ,2BAAmB;AACvB,oBAAIC,kBAAkBC,OAAOC,IAAP,CAAYzB,YAAY,eAAZ,CAAZ,CAAtB;AACAuB,gCAAgBG,OAAhB,CAAwB,MAAxB;;AAEA,oBAAIC,mBAAmBH,OAAOC,IAAP,CAAYzB,YAAY,gBAAZ,CAAZ,CAAvB;AACA2B,iCAAiBD,OAAjB,CAAyB,MAAzB;;AAEAvB,uBAAO,CAAC;AACJW,0BAAM,OADF;AAEJC,0BAAM,MAFF;AAGJa,8BAAU,WAHN;AAIJC,8BAAUC,QAAQC,GAAR,EAJN;AAKJb,6BAASX,eAAKU,EAAL,CAAQ,6BAAR,CALL;AAMJD,6BAASc,QAAQC,GAAR,KAAgB,GAAhB,GAAsBC,gBAAgBjB,IAN3C;AAOJkB,iCAAa;AAPT,iBAAD,EAQJ;AACCnB,0BAAM,OADP;AAECC,0BAAM,YAFP;AAGCG,6BAASX,eAAKU,EAAL,CAAQ,yCAAR,CAHV;AAICE,8BAAU,kBAACC,KAAD,EAAW;AACjB,4BAAGA,UAAU,EAAb,EAAgB;AACZ,gCAAI,yEAAyEc,IAAzE,CAA8Ed,KAA9E,CAAJ,EACI,OAAO,IAAP,CADJ,KAGI,OAAOb,eAAKU,EAAL,CAAQ,mCAAR,CAAP;AACP,yBALD,MAMI;AACA,mCAAO,IAAP;AACH;AACJ;AAdF,iBARI,EAuBJ;AACCH,0BAAM,MADP;AAECC,0BAAM,UAFP;AAGCG,6BAASX,eAAKU,EAAL,CAAQ,sCAAR,CAHV;AAICkB,6BAASR,gBAJV,CAKF;;;;;;;;;iDALE,EAvBI,CAAP,EAqCML,IArCN,CAqCW,2BAAmB;AAC1B,wBAAGc,gBAAgBC,QAAnB,EAA4B;AACxBlC,+BAAO,CAAC;AACJW,kCAAM,OADF;AAEJC,kCAAM,MAFF;AAGJG,qCAASX,eAAKU,EAAL,CAAQ,wCAAR,CAHL;AAIJD,qCAAS,MAJL;AAKJG,sCAAU,kBAACC,KAAD,EAAW;AACjB,oCAAG;AACC,wCAAIkB,SAASC,SAASnB,KAAT,CAAb;;AAEA,wCAAGkB,UAAU,CAAV,IAAeA,UAAU,KAA5B,EACI,OAAO,IAAP,CADJ,KAGI,OAAO/B,eAAKU,EAAL,CAAQ,2CAAR,CAAP;AACP,iCAPD,CAQA,OAAMuB,CAAN,EAAQ;AACJ,2CAAOjC,eAAKU,EAAL,CAAQ,2CAAR,CAAP;AACH;AACJ;AAjBG,yBAAD,EAkBJ;AACCH,kCAAM,UADP;AAECC,kCAAM,SAFP;AAGCG,qCAASX,eAAKU,EAAL,CAAQ,kCAAR,CAHV;AAICkB,qCAASX,OAAOC,IAAP,CAAYzB,YAAY,cAAZ,CAAZ;AAJV,yBAlBI,CAAP,EAuBIsB,IAvBJ,CAuBS,kCAA0B;AAC/B;;;;;;;;;;;;;;;;;AAiBI,gCAAImB,WAAWC,iBAAEC,KAAF,CAAQX,eAAR,EAAyBI,eAAzB,EAA0CQ,sBAA1C,CAAf;AACA/B,iCAAK4B,QAAL,GAAgBA,QAAhB;AACA5B,iCAAKgC,aAAL;AACJ;AACH,yBA7CD;AA8CH,qBA/CD,MAgDI;AACAJ,mCAAWC,iBAAEC,KAAF,CAAQX,eAAR,EAAyBI,eAAzB,CAAX;AACAvB,6BAAK4B,QAAL,GAAgBA,QAAhB;AACA5B,6BAAKgC,aAAL;AACH;AACJ,iBA3FD,EA2FG;AACN,aA9ID;AA+IH;;;wCAEc;AACX,gBAAIhC,OAAO,IAAX;;AAEA,gBAAG,CAAC,KAAKiC,eAAL,CAAqBjC,KAAK4B,QAAL,CAAc/C,IAAnC,CAAJ,EAA6C;AACzCqD,wBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,qBAAR,IAAiCJ,KAAK4B,QAAL,CAAc/C,IAA3D,CAAZ;;AAEAG,6BAAGsD,KAAH,CAAStC,KAAK4B,QAAL,CAAc/C,IAAvB,EAA6B,EAAE0D,WAAW,IAAb,EAA7B,EAAkD,UAACC,GAAD,EAAS;AACvD,wBAAGA,GAAH,EAAQC,OAAOD,GAAP,EAAR,KACKxC,KAAK0C,aAAL,CAAmB1C,IAAnB;AACR,iBAHD;AAIH,aAPD,MAQI;AACAkC,wBAAQC,GAAR,CAAYC,gBAAMO,GAAN,CAAWjD,eAAKU,EAAL,CAAQ,gFAAR,CAAX,CAAZ;AACH;AACJ;;;sCAEaJ,I,EAAK;AACfkC,oBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,kBAAR,IAA8BjB,YAAYyD,UAAZ,CAAuBC,GAAvB,CAA2BC,OAA3B,CAAmC,KAAnC,EAA0C,UAA1C,CAA1C,CAAZ;;AAEA,gBAAG9C,KAAK4B,QAAL,CAAcJ,QAAd,IAA0B,MAA7B,EAAoC;AAChC,oBAAIuB,QAAQ,uEAAiD/C,KAAK4B,QAAL,CAAcJ,QAA/D,SAA2ExB,KAAK4B,QAAL,CAAc/C,IAAzF,EAAiG;AACzGmE,2BAAO,IADkG;AAEzGC,yBAAKhC,QAAQgC,GAF4F;AAGzG/B,yBAAKlB,KAAK4B,QAAL,CAAc/C;AAHsF,iBAAjG,CAAZ;;AAMAkE,sBAAMG,EAAN,CAAS,MAAT,EAAiB,UAAUC,QAAV,EAAoB;AACjCnD,yBAAKoD,mBAAL,CAAyBpD,IAAzB;AACH,iBAFD;AAGH,aAVD,MAWI;AACAA,qBAAKqD,mBAAL,CAAyBrD,IAAzB;AACH;AACJ;;;4CAEmBA,I,EAAK;AACrB,gBAAG;AACCkC,wBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,8BAAR,CAAZ,CAAZ;AACApB,6BAAGsE,UAAH,CAAczE,eAAKQ,IAAL,CAAUW,KAAK4B,QAAL,CAAc/C,IAAxB,EAA8B,cAA9B,CAAd;AACH,aAHD,CAGE,OAAM8C,CAAN,EAAS,CAAE,sCAAwC;;AAErDO,oBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,qBAAqBvB,eAAKQ,IAAL,CAAUW,KAAK4B,QAAL,CAAc/C,IAAxB,EAA8B,MAA9B,CAA7B,CAAZ,CAAZ;;AAEA;AACA,kCAAOA,eAAKQ,IAAL,CAAUW,KAAK4B,QAAL,CAAc/C,IAAxB,EAA8B,MAA9B,CAAP,EAA8C,YAAM;AAChDmB,qBAAKqD,mBAAL,CAAyBrD,IAAzB;AACH,aAFD;;AAIA;AACA,gBAAIuD,mCAAiCvD,KAAK4B,QAAL,CAAc4B,IAA/C,sBAAJ;;AAEA;;;;;;;;;;;;;;;;;AAmBAxE,yBAAGyE,aAAH,CAAiB5E,eAAKQ,IAAL,CAAUW,KAAK4B,QAAL,CAAc/C,IAAxB,EAA8B,MAA9B,CAAjB,EAAwD0E,UAAxD;AACH;;;4CAEmBvD,I,EAAK;AACrBkC,oBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,mCAAR,CAAZ,CAAZ;;AAEA;;;AAGI,gBAAIsD,sBAAsBtE,QAAQP,eAAKQ,IAAL,CAAUT,OAAV,EAAmB,WAAnB,EAAgC,iBAAhC,CAAR,CAA1B;;AAEJ8E,kCAAsBA,oBAAoB1D,IAApB,CAAtB;;AAEA,gBAAGA,KAAK4B,QAAL,CAAcgB,UAAd,IAA4B,EAA/B,EAAkC;AAC9Bc,oCAAoBC,QAApB,GAA+B3D,KAAK4B,QAAL,CAAcgB,UAA7C;;AAEAc,oCAAoBd,UAApB,GAAiC;AAC7B,4BAAQ,KADqB;AAE7B,2BAAO5C,KAAK4B,QAAL,CAAcgB;AAFQ,iBAAjC;;AAKAc,oCAAoBE,IAApB,GAA2B;AACvB,2BAAO5D,KAAK4B,QAAL,CAAcgB,UAAd,GAA2B;AADX,iBAA3B;AAGH;;AAED,gBAAG5C,KAAK4B,QAAL,CAAcgB,UAAd,IAA4B,EAA/B,EAAkC;AAC9BV,wBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAY3C,eAAKU,EAAL,CAAQ,2BAAR,CAAZ,CAAZ;;AAEA,yCAAK,UAAL,EAAiB,EAAEc,KAAKlB,KAAK4B,QAAL,CAAc/C,IAArB,EAAjB,EAA8C,UAAC2D,GAAD,EAAMqB,MAAN,EAAcC,MAAd,EAAyB;AACnE,wBAAGtB,GAAH,EAAQN,QAAQC,GAAR,CAAYC,gBAAMO,GAAN,CAAUH,GAAV,CAAZ,EAAR,KACI;AACA,iDAAK,2BAA2BxC,KAAK4B,QAAL,CAAcgB,UAA9C,EAA0D,EAAE1B,KAAKlB,KAAK4B,QAAL,CAAc/C,IAArB,EAA1D,EAAuF,UAAC2D,GAAD,EAAMqB,MAAN,EAAcC,MAAd,EAAyB;AAC5G,gCAAGtB,GAAH,EAAQN,QAAQC,GAAR,CAAYC,gBAAMO,GAAN,CAAUH,GAAV,CAAZ,EAAR,KACI;AACA,oCAAIuB,gBAAJ,GAAcC,SAAd,CAAwBhE,IAAxB,EAA8B0D,mBAA9B;AACH;AACJ,yBALD;AAMH;AACJ,iBAVD;AAWH,aAdD,MAeI;AACA,oBAAIK,gBAAJ,GAAcC,SAAd,CAAwBhE,IAAxB,EAA8B0D,mBAA9B;AACH;AACJ;;;wCAEeO,Q,EAAS;AACrB,gBAAI;AAAE,uBAAOjF,aAAGkF,QAAH,CAAYD,QAAZ,EAAsBE,WAAtB,EAAP;AAA6C,aAAnD,CACA,OAAO3B,GAAP,EAAY;AAAE,uBAAO,KAAP;AAAe;AAChC;;;+BAEK;AACFN,oBAAQC,GAAR,CAAYC,gBAAMgC,MAAN,CAAa,6BAAb,CAAZ;AACH;;;;;;;uEAGU,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,4BADO,GACA,IAAIvE,IAAJ,EADA;;;AAGX,4BAAGsE,KAAKE,CAAR,EACID,KAAKE,IAAL,GADJ,KAGIF,KAAKG,MAAL;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","file":"init.js","sourcesContent":["import '@babel/polyfill/noConflict';\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport npm from \"npm\";\nimport minimist from \"minimist\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport i18n from \"i18n\";\nimport _ from \"lodash\";\nimport gitClone from \"git-clone\";\nimport rimraf from \"rimraf\";\nimport { exec, spawn } from \"child_process\";\n//import YAML from 'yaml';\n\nimport { Install } from \"./install\";\n\nconst CLIPath = path.resolve(path.dirname(fs.realpathSync(__filename)), \"../\");\nconst PackageJSON = require(path.join(CLIPath, \"package\"));\n\nlet prompt = inquirer.createPromptModule();\ninquirer.registerPrompt('fuzzypath', require('inquirer-fuzzy-path'));\n\ni18n.configure({\n    locales: ['en'],\n    defaultLocale: 'en',\n    directory: path.join(CLIPath, \"locales\")\n});\n\nexport class Init{\n    Prompt(){\n        var self = this;\n\n        prompt([\n            /*{\n                type: \"list\",\n                name: \"lang\",\n                choices: [\"en\", \"ptBR\"],\n                message: \"What is your language?\",\n                validate: (value) => {\n                    i18n.setLocale(value);\n                    true;\n                }\n            },*/\n            {\n                type: \"input\",\n                name: \"name\",\n                default: i18n.__(\"myproject\"),\n                message: i18n.__(\"What is the name of the project?\"),\n                validate: (value) => {\n                    if (value.length)\n                        return true;\n                    else\n                        return i18n.__(\"Please set a valid value\");\n                }\n            }, {\n                type: \"input\",\n                name: \"author\",\n                message: i18n.__(\"What is the author's name?\")\n            }, {\n                type: \"input\",\n                name: \"description\",\n                default: i18n.__(\"Another DEK project\"),\n                message: i18n.__(\"What is the project description?\")\n            }, {\n                type: \"input\",\n                name: \"version\",\n                default: \"1.0.0\",\n                message: i18n.__(\"What is the version of the project?\"),\n                validate: (value) => {\n                    if (value.length)\n                        return true;\n                    else\n                        return i18n.__(\"Please set a valid value\");\n                }\n            },\n        ]).then(projectSettings => {\n            var frontendChoices = Object.keys(PackageJSON[\"@dek/frontend\"]);\n            frontendChoices.unshift(\"none\");\n\n            var skeletonsChoices = Object.keys(PackageJSON[\"@dek/skeletons\"]);\n            skeletonsChoices.unshift(\"none\");\n\n            prompt([{\n                type: 'input',\n                name: 'path',\n                itemType: 'directory',\n                rootPath: process.cwd(),\n                message: i18n.__(\"Directory for your project:\",),\n                default: process.cwd() + \"/\" + projectSettings.name,\n                suggestOnly: true\n            }, {\n                type: 'input',\n                name: 'repository',\n                message: i18n.__(\"What is the repository of this project?\"),\n                validate: (value) => {\n                    if(value !== \"\"){\n                        if (/(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\.git)(\\/?|\\#[-\\d\\w._]+?)$/.test(value))\n                            return true;\n                        else\n                            return i18n.__(\"Please set a valid repository url\");\n                    }\n                    else{\n                        return true;\n                    }\n                }\n            }, {\n                type: 'list',\n                name: 'skeleton',\n                message: i18n.__(\"Do you want to use default skeleton?\"),\n                choices: skeletonsChoices\n            }/*, {\n                type: 'confirm',\n                name: 'devmode',\n                message: i18n.__(\"Do you want to install components for development mode?\"),\n            }, {\n                type: 'list',\n                name: 'frontend',\n                message: i18n.__(\"Do you want to install some frontend framework?\"),\n                choices: frontendChoices\n            }*/]).then(projectConfirms => {\n                if(projectConfirms.skeleton){\n                    prompt([{\n                        type: 'input',\n                        name: 'port',\n                        message: i18n.__(\"Define which port will be the backend:\"),\n                        default: \"5555\",\n                        validate: (value) => {\n                            try{\n                                var iValue = parseInt(value);\n\n                                if(iValue >= 1 && iValue <= 65535)\n                                    return true;\n                                else\n                                    return i18n.__(\"Please enter a valid port between 1-65535\");\n                            }\n                            catch(e){\n                                return i18n.__(\"Please enter a valid port between 1-65535\");\n                            }\n                        }\n                    }, {\n                        type: 'checkbox',\n                        name: 'plugins',\n                        message: i18n.__(\"Select plugins for your project:\"),\n                        choices: Object.keys(PackageJSON[\"@dek/plugins\"])\n                    }]).then(projectSettingsPlugins => {\n                        /*if(projectConfirms.frontend != \"none\"){\n                            prompt([{\n                                type: 'confirm',\n                                name: 'frontendproxy',\n                                message: i18n.__(\"Do you want to create a frontend proxy?\"),\n                            }, {\n                                type: 'input',\n                                name: 'backendroute',\n                                default: \"/api\",\n                                message: i18n.__(\"What will be the backend path?\"),\n                            }]).then(projectFrontendSettings => {\n                                let settings = _.merge(projectSettings, projectConfirms, projectSettingsPlugins, projectFrontendSettings);\n                                self.settings = settings;\n                                self.createProject();\n                            });\n                        }\n                        else{*/\n                            let settings = _.merge(projectSettings, projectConfirms, projectSettingsPlugins);\n                            self.settings = settings;\n                            self.createProject();\n                        //}\n                    });\n                }\n                else{\n                    settings = _.merge(projectSettings, projectConfirms);\n                    self.settings = settings;\n                    self.createProject();\n                }\n            });;\n        });\n    }\n\n    createProject(){\n        var self = this;\n\n        if(!this.directoryExists(self.settings.path)){\n            console.log(chalk.green(i18n.__(\"Creating directory \") + self.settings.path));\n\n            fs.mkdir(self.settings.path, { recursive: true }, (err) => {\n                if(err) reject(err);\n                else self.cloneSkeleton(self);\n            });\n        }\n        else{\n            console.log(chalk.red((i18n.__(\"It was not possible to create the project because the directory already exists\"))));\n        }\n    }\n\n    cloneSkeleton(self){\n        console.log(chalk.green(i18n.__(\"Clone boorstrap \") + PackageJSON.repository.url.replace(\"CLI\", \"boostrap\")));\n\n        if(self.settings.skeleton != \"none\"){\n            var child = spawn(`git clone https://github.com/dekproject/${self.settings.skeleton} ${self.settings.path}`, {\n                shell: true,\n                env: process.env,\n                cwd: self.settings.path\n            });\n\n            child.on('exit', function (exitCode) {\n                self.unlinkGitAndPackage(self);\n            });\n        }\n        else{\n            self.createGitAndPackage(self);\n        }\n    }\n\n    unlinkGitAndPackage(self){\n        try{\n            console.log(chalk.green(i18n.__(\"Unlink boostrap package.json\")));\n            fs.unlinkSync(path.join(self.settings.path, \"package.json\"));\n        } catch(e) { /*console.log(chalk.red(e.message));*/ }\n\n        console.log(chalk.green(i18n.__(\"Unlink boostrap \" + path.join(self.settings.path, \".git\"))));\n\n        //Remove .git\n        rimraf(path.join(self.settings.path, \".git\"), () => {\n            self.createGitAndPackage(self);\n        });\n\n        //Create .env\n        var dotEnvFile = `DEBUG=true\\nPORT=${self.settings.port}\\nCLUSTER_MAX=1\\n`;\n\n        /*if(self.settings.frontend != \"none\" && self.settings.frontendproxy){\n            switch (self.settings.frontend) {\n                case \"nuxt\":\n                case \"react\":\n                    dotEnvFile += \"PROXY_URL=http://localhost:3000\\n\";\n                break;\n                case \"angular\": dotEnvFile += \"PROXY_URL=http://localhost:4200\\n\"; break;\n                default:\n                    console.log(chalk.red(i18n.__(\"Error trying to create proxy\")));\n                break;\n            }\n\n            if(self.settings.backendroute)\n                dotEnvFile += `BACKEND_ALIAS=${self.settings.backendroute}\\n`;\n\n            //Create proxy.js\n            fs.writeFileSync(path.join(self.settings.path, \"src\", \"proxy.js\"), require(path.join(CLIPath, \"templates\", \"proxy.js\"))());\n        }*/\n\n        fs.writeFileSync(path.join(self.settings.path, \".env\"), dotEnvFile);\n    }\n\n    createGitAndPackage(self){\n        console.log(chalk.green(i18n.__(\"Creating project package.json ...\")));\n\n        /*if(self.settings.frontend && self.settings.frontend != \"none\")\n            var packageJSONTemplate = require(path.join(CLIPath, \"templates\", \"package-with-frontend.json.js\"));\n        else*/\n            var packageJSONTemplate = require(path.join(CLIPath, \"templates\", \"package.json.js\"));\n\n        packageJSONTemplate = packageJSONTemplate(self);\n\n        if(self.settings.repository != \"\"){\n            packageJSONTemplate.homepage = self.settings.repository;\n\n            packageJSONTemplate.repository = {\n                \"type\": \"git\",\n                \"url\": self.settings.repository\n            };\n\n            packageJSONTemplate.bugs = {\n                \"url\": self.settings.repository + \"/issues\"\n            }\n        }\n\n        if(self.settings.repository != \"\"){\n            console.log(chalk.green(i18n.__(\"Creating project .git ...\")));\n\n            exec(\"git init\", { cwd: self.settings.path }, (err, stdout, stderr) => {\n                if(err) console.log(chalk.red(err));\n                else{\n                    exec(\"git remote add origin \" + self.settings.repository, { cwd: self.settings.path }, (err, stdout, stderr) => {\n                        if(err) console.log(chalk.red(err));\n                        else{\n                            new Install().bootstrap(self, packageJSONTemplate);\n                        }\n                    });\n                }\n            });\n        }\n        else{\n            new Install().bootstrap(self, packageJSONTemplate);\n        }\n    }\n\n    directoryExists(filePath){\n        try { return fs.statSync(filePath).isDirectory(); }\n        catch (err) { return false; }\n    }\n\n    Help(){\n        console.log(chalk.yellow(\"Very simple 'dek init' only\"));\n    }\n}\n\nexport default async (argv) => {\n    let init = new Init();\n\n    if(argv.h)\n        init.Help();\n    else\n        init.Prompt();\n}\n"]}