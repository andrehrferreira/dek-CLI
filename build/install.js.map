{"version":3,"sources":["../src/install.js"],"names":["PackageJSON","require","path","join","process","cwd","Install","self","packageJSONTemplate","console","log","chalk","green","i18n","__","cliDevMode","settings","err","stdout","stderr","write","addPackageDependencies","devMode","red","e","message","webpack","webpackLoaders","WebpackConfigTemplate","fs","writeFileSync","scripts","callback","forEach","usageText","argv","install","h","_","length"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;AAEA,IAAMA,cAAcC,QAAQC,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,SAAzB,CAAR,CAApB;;IAEaC,O,WAAAA,O;;;;;;;kCACCC,I,EAAMC,mB,EAAoB;AAChCC,oBAAQC,GAAR,CAAYF,mBAAZ;AACH;;;uCAEcD,I,EAAK;AAChBE,oBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAYC,eAAKC,EAAL,CAAQ,sBAAR,CAAZ,CAAZ;;AAEA,qCAAKd,YAAY,cAAZ,EAA4Be,UAAjC,EAA6C,EAAEV,KAAKE,KAAKS,QAAL,CAAcd,IAArB,EAA7C,EAA0E,UAACe,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAyB;AAC/Ff,wBAAQc,MAAR,CAAeE,KAAf,CAAqBF,SAAS,IAA9B;AACAd,wBAAQe,MAAR,CAAeC,KAAf,CAAqBD,SAAS,IAA9B;;AAEA,oBAAG;AACCZ,yBAAKc,sBAAL,CAA4BrB,YAAY,cAAZ,EAA4BsB,OAAxD,EAAiE,EAAEjB,KAAKE,KAAKS,QAAL,CAAcd,IAArB,EAAjE,EAA8F,UAACe,GAAD,EAAS;AACnG,4BAAGA,GAAH,EAAQR,QAAQC,GAAR,CAAYC,gBAAMY,GAAN,CAAUN,GAAV,CAAZ,EAAR,KACK,6BAAeV,KAAKS,QAApB;AACR,qBAHD;AAIH,iBALD,CAKE,OAAMQ,CAAN,EAAQ;AACNf,4BAAQC,GAAR,CAAYC,gBAAMY,GAAN,CAAUC,EAAEC,OAAZ,CAAZ;AACA,iDAAelB,KAAKS,QAApB;AACH;AACJ,aAbD;AAcH;;;uCAEcT,I,EAAK;AAChBE,oBAAQC,GAAR,CAAYC,gBAAMC,KAAN,CAAYC,eAAKC,EAAL,CAAQ,qBAAR,CAAZ,CAAZ;;AAEAP,iBAAKc,sBAAL,CAA4B,CAACrB,YAAY,cAAZ,EAA4B0B,OAA7B,EAAsC1B,YAAY,cAAZ,EAA4B2B,cAAlE,CAA5B,EAA+G,EAAEtB,KAAKE,KAAKS,QAAL,CAAcd,IAArB,EAA/G,EAA4I,UAACe,GAAD,EAAS;AACjJ,oBAAIW,wBAAwB3B,QAAQC,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,WAAzB,EAAsC,mBAAtC,CAAR,EAAoEE,IAApE,CAA5B;AACAsB,6BAAGC,aAAH,CAAiB5B,eAAKC,IAAL,CAAUI,KAAKS,QAAL,CAAcd,IAAxB,EAA8B,mBAA9B,CAAjB,EAAqE0B,sBAAsBrB,IAAtB,CAArE;AACH,aAHD;AAIH;;;+CAEsBwB,O,EAASf,Q,EAAUgB,Q,EAAS;AAC/C,gBAAG,OAAOD,OAAP,IAAkB,QAArB,EACIA,UAAU,CAACA,OAAD,CAAV;;AAEJA,oBAAQE,OAAR,CAAgB,YAAM,CAErB,CAFD;;AAIA;AACA;AACH;;;+BAEK;AACF,gBAAMC,wJAAN;;AAOEzB,oBAAQC,GAAR,CAAYwB,SAAZ;AACL;;;;;;;uEAGU,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,+BADO,GACG,IAAI9B,OAAJ,EADH;;;AAGX,4BAAG6B,KAAKE,CAAR,EAAU,CAET,CAFD,MAGK,IAAGF,KAAKG,CAAL,CAAOC,MAAP,GAAgB,CAAnB,EAAqB;AACtB;AACH,yBAFI,MAGD,CAEH;;AAXU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","file":"install.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport npm from \"npm\";\n\nimport 'babel-polyfill';\nimport minimist from \"minimist\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport i18n from \"i18n\";\nimport _ from \"lodash\";\nimport gitClone from \"git-clone\";\nimport rimraf from \"rimraf\";\nimport { exec } from \"child_process\";\n\nimport { installPlugins } from \"./plugins\";\n\nconst PackageJSON = require(path.join(process.cwd(), \"package\"));\n\nexport class Install{\n    bootstrap(self, packageJSONTemplate){\n        console.log(packageJSONTemplate);\n    }\n\n    installDevMode(self){\n        console.log(chalk.green(i18n.__(\"Install dev mode ...\")));\n\n        exec(PackageJSON[\"@dek/scripts\"].cliDevMode, { cwd: self.settings.path }, (err, stdout, stderr) => {\n            process.stdout.write(stdout + '\\n');\n            process.stderr.write(stderr + '\\n');\n\n            try{\n                self.addPackageDependencies(PackageJSON[\"@dek/scripts\"].devMode, { cwd: self.settings.path }, (err) => {\n                    if(err) console.log(chalk.red(err));\n                    else installPlugins(self.settings);\n                });\n            } catch(e){\n                console.log(chalk.red(e.message));\n                installPlugins(self.settings);\n            }\n        });\n    }\n\n    installWebpack(self){\n        console.log(chalk.green(i18n.__(\"Install Webpack ...\")));\n\n        self.addPackageDependencies([PackageJSON[\"@dek/scripts\"].webpack, PackageJSON[\"@dek/scripts\"].webpackLoaders], { cwd: self.settings.path }, (err) => {\n            var WebpackConfigTemplate = require(path.join(process.cwd(), \"templates\", \"webpack.config.js\"))(self);\n            fs.writeFileSync(path.join(self.settings.path, \"webpack.config.js\"), WebpackConfigTemplate(self));\n        });\n    }\n\n    addPackageDependencies(scripts, settings, callback){\n        if(typeof scripts == \"string\")\n            scripts = [scripts];\n\n        scripts.forEach(() => {\n\n        });\n\n        //var sepScript = script.split(\"&&\");\n        //console.log();\n    }\n\n    Help(){\n        const usageText = `\n      Usage:\n        dek install (with no args, in package dir)\n        dek install <plugin>\n        dek install <git:// url>\n      `\n\n          console.log(usageText)\n    }\n}\n\nexport default async (argv) => {\n    let install = new Install();\n\n    if(argv.h){\n\n    }\n    else if(argv._.length > 1){\n        //Install Plugins\n    }\n    else{\n\n    }\n}\n"]}